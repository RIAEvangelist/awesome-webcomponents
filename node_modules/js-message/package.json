{
  "name": "js-message",
  "version": "1.0.5",
  "description": "normalized JS Object and JSON message and event protocol for node.js, vanialla js, react.js, components, actions, stores and dispatchers",
  "main": "Message.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node devServer.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/RIAEvangelist/js-message.git"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "keywords": [
    "message",
    "normalize",
    "events",
    "js",
    "json",
    "protocol",
    "ipc",
    "node",
    "nodejs",
    "node.js",
    "react",
    "react.js",
    "reactjs",
    "websocket",
    "websockets",
    "web",
    "socket",
    "sockets",
    "ws",
    "flux",
    "reflux",
    "component",
    "components",
    "store",
    "stores",
    "action",
    "actions"
  ],
  "author": {
    "name": "Brandon Nozaki Miller"
  },
  "license": "DBAD",
  "bugs": {
    "url": "https://github.com/RIAEvangelist/js-message/issues"
  },
  "homepage": "https://github.com/RIAEvangelist/js-message#readme",
  "dependencies": {},
  "devDependencies": {},
  "readme": "# js-message\nNormalized JS & JSON Message and event Protocol for node.js, vanilla.js (plain old javascript), react.js, websockets, rest api's, node-ipc, and any other protocol that might use a js object and or a JSON string.  \n\njs-message allows for seamless conversion of JSON messages and events to JS objects for a normalized implementation on the server and in the client without needing to concern yourself with JSON intermediaries and custom parsers.  \n\nThings are just easier when you normalize them.  \n\nnpm js-message info :  [See npm trends and stats for js-message](http://npm-stat.com/charts.html?package=js-message&author=&from=&to=)  \n![js-message npm version](https://img.shields.io/npm/v/js-message.svg) ![supported node version for js-message](https://img.shields.io/node/v/js-message.svg) ![total npm downloads for js-message](https://img.shields.io/npm/dt/js-message.svg) ![monthly npm downloads for js-message](https://img.shields.io/npm/dm/js-message.svg) ![npm licence for js-message](https://img.shields.io/npm/l/js-message.svg)\n\n` npm install --save js-message `  \n\n[![RIAEvangelist](https://avatars3.githubusercontent.com/u/369041?v=3&s=100)](https://github.com/RIAEvangelist)\n\nGitHub info :  \n[![js-message GitHub Release](https://img.shields.io/github/release/RIAEvangelist/js-message.svg) ![GitHub license js-message license](https://img.shields.io/github/license/RIAEvangelist/js-message.svg) ![open issues for js-message on GitHub](https://img.shields.io/github/issues/RIAEvangelist/js-message.svg)](http://riaevangelist.github.io/js-message/)\n\n[js-message site](http://riaevangelist.github.io/js-message/)\n\n\n|method or key  |type   |mutable|description|\n|---------------|-------|-------|-----------|\n|type           |String |true   |the type of message|\n|data           |Object |true   |the message data or payload|\n|load           |func   |false  |load a message from JSON, this will return a message with the type of error if not valid JSON|\n|JSON           |String |not by user|JSON representation of the message|\n\n### Creating a Message Object\n\n```javascript\n\n    //commonjs\n    var Message=require('js-message');\n    //plain old javascript\n    <script src='js-message-vanilla.js' />\n\n    var myMessage=new Message;\n    myMessage.type='message or event type';\n    myMessage.data.something='something';\n    myMessage.data.stuff=[1,2,3,4,5]\n\n    console.log(myMessage.JSON);\n\n```\n\n### Creating a Message From JSON\n\n```javascript\n\n    //commonjs\n    var Message=require('js-message');\n    //plain old javascript\n    <script src='js-message-vanilla.js' />\n\n    //lets say we have the above example running on\n    //a websocket server sending js-messages as JSON\n    //\n    //and lets say this is the client in the browser\n    ws.on(\n        'message',\n        handleMessage\n    );\n\n    handleMessage(e){\n        var message=new Message;\n        message.load(e.data);\n\n        console.log(message.type, message.data);\n    }\n\n```\n\n### Sending a Message Object via WebSocket\n\n```javascript\n\n    //commonjs\n    var Message=require('js-message');\n    //plain old javascript\n    <script src='js-message-vanilla.js' />\n\n    //client example, but works the same on server too!\n    var ws=new WebSocket('ws://myawesomeWS:8000');\n\n    var myMessage=new Message;\n    myMessage.type='setUsername';\n    myMessage.data.username='sideshow bob';\n\n    ws.send(myMessage.JSON);\n\n```\n\n\n---\n\nThis work is licenced via the [DBAD Public Licence](http://www.dbad-license.org/).\n",
  "readmeFilename": "README.md",
  "gitHead": "ed5af206add788fbbe87794fda0bd2522455d8c5",
  "_id": "js-message@1.0.5",
  "_shasum": "2300d24b1af08e89dd095bc1a4c9c9cfcb892d15",
  "_from": "js-message@*"
}
